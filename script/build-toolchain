#!/usr/bin/env bash

set -exu

ROOT_PATH=$(cd $(dirname $0)/..; pwd)

source ${ROOT_PATH}/script/lib/vars.bash
source ${ROOT_PATH}/script/lib/cache.bash

INSTALL_PATH="/opt/cyanurus"
BUILD_OPTION="--prefix=${INSTALL_PATH}"

GCC_VERSION="5.3.0"
LLVM_VERSION="371"
QEMU_VERSION="${QEMU_VERSION:-v2.4.1}"
MUSL_VERSION="${MUSL_VERSION:-v1.1.8}"

# svn
LLVM_URL="http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_${LLVM_VERSION}/final/"
CLANG_URL="http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_${LLVM_VERSION}/final/"
COMPILER_RT_URL="http://llvm.org/svn/llvm-project/compiler-rt/tags/RELEASE_${LLVM_VERSION}/final/"

# git
CYANURUS_URL="https://github.com/redcap97/cyanurus.git"
QEMU_URL="git://git.qemu.org/qemu.git"
MUSL_URL="git://git.musl-libc.org/musl"

# tarball
BINUTILS_URL="http://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.bz2"
GCC_URL="http://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.bz2"
GDB_URL="http://ftp.gnu.org/gnu/gdb/gdb-7.10.1.tar.xz"
UTIL_LINUX_URL="http://ftp.kernel.org/pub/linux/utils/util-linux/v2.27/util-linux-2.27.1.tar.xz"
RUBY_URL="http://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.4.tar.gz"

export PATH=${INSTALL_PATH}/bin:${INSTALL_PATH}/sbin:$PATH

fetch-clang() {
  local cache="${CACHE_PATH}/llvm-${LLVM_VERSION}"

  if [ ! -d ${cache} ]; then
    svn co ${LLVM_URL} ${cache}
    svn co ${CLANG_URL} ${cache}/tools/clang
    svn co ${COMPILER_RT_URL} ${cache}/projects/compiler-rt
  fi

  cp -r ${cache} llvm
}

patch-binutils() {
  pushd binutils
  sed -i -e 's/^\(TEXT_START_ADDR\)=.*$/\1=0x10000/' ld/emulparams/armelf.sh
  popd
}

install-binutils() {
  local arch=$1

  mkdir ${arch}-binutils
  pushd ${arch}-binutils
  ../binutils/configure ${BUILD_OPTION} --target=${arch} --disable-nls --disable-werror
  make -j${JOBS}
  make install
  popd
}

install-gcc() {
  local arch=$1

  mkdir ${arch}-gcc
  pushd ${arch}-gcc
  ../gcc/configure ${BUILD_OPTION} --target=${arch} --disable-nls --disable-threads --disable-shared --disable-libssp --enable-languages=c
  make -j${JOBS}
  make install
  popd
}

install-clang() {
  mkdir llvm-build
  pushd llvm-build
  cmake ../llvm -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH} -DCMAKE_BUILD_TYPE=Release -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF
  make -j${JOBS}
  make install
  popd
}

install-gdb() {
  local arch=$1

  mkdir ${arch}-gdb
  pushd ${arch}-gdb
  ../gdb/configure ${BUILD_OPTION} --target=${arch}
  make -j${JOBS}
  make install
  popd
}

install-crt() {
  local arch=$1

  pushd cyanurus
  make -j${JOBS}
  make test
  install -m 0644 build/crt/crt0.o ${INSTALL_PATH}/lib/gcc/${arch}/${GCC_VERSION}/crt0.o
  popd
}

install-musl() {
  local arch=$1

  pushd musl
  CC="${arch}-gcc" CFLAGS="-Os -march=armv7-a -mfloat-abi=soft -marm" ./configure --disable-shared --prefix=${INSTALL_PATH}/${arch}
  make -j${JOBS}
  make install
  popd
}

install-util-linux() {
  pushd util-linux
  ./configure ${BUILD_OPTION} --disable-all-programs --enable-minix --disable-bash-completion
  make -j${JOBS}
  make install
  popd
}

install-qemu() {
  pushd qemu
  ./configure ${BUILD_OPTION} --target-list=arm-softmmu,arm-linux-user
  make -j${JOBS}
  make install
  popd
}

install-ruby() {
  pushd ruby
  ./configure ${BUILD_OPTION} --disable-install-doc
  make -j${JOBS}
  make install
  popd
}

test-toolchain() {
  pushd cyanurus
  make clean
  make -j${JOBS} CYANURUS_CC=arm-cyanurus-eabi-gcc
  make test
  popd
}

archive-toolchain() {
  pushd ${INSTALL_PATH}
  tar Jcf ${ROOT_PATH}/artifact/toolchain.tar.xz *
  popd
}

mkdir -p ${CACHE_PATH}

if [ ! -d "${INSTALL_PATH}" ]; then
  echo "The directory doesn't exists: ${INSTALL_PATH}" >&2
  exit 1
fi

rm -rf ${INSTALL_PATH}/*

mkdir ${BUILD_PATH}
pushd ${BUILD_PATH}

fetch-tarball ${BINUTILS_URL}   binutils
patch-binutils

fetch-tarball ${GCC_URL}        gcc
fetch-tarball ${GDB_URL}        gdb
fetch-tarball ${UTIL_LINUX_URL} util-linux
fetch-tarball ${RUBY_URL}       ruby

fetch-git-repository ${CYANURUS_URL} cyanurus master
fetch-git-repository ${QEMU_URL}     qemu     ${QEMU_VERSION}
fetch-git-repository ${MUSL_URL}     musl     ${MUSL_VERSION}

if [[ -v USE_CLANG && -n ${USE_CLANG} ]]; then
  fetch-clang
  install-clang
fi

install-binutils arm-none-eabi
install-gcc      arm-none-eabi
install-gdb      arm-none-eabi

install-util-linux
install-qemu
install-ruby

install-binutils arm-cyanurus-eabi
install-gcc      arm-cyanurus-eabi
install-gdb      arm-cyanurus-eabi
install-crt      arm-cyanurus-eabi
install-musl     arm-cyanurus-eabi

test-toolchain

popd
rm -rf ${BUILD_PATH}

install -m 0755 ${ROOT_PATH}/bin/* ${INSTALL_PATH}/bin
archive-toolchain
